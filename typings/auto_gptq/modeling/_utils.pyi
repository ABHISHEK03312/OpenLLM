from typing import Union

import torch
from _typeshed import Incomplete
from torch import nn

def get_device(obj: Union[torch.Tensor, nn.Module]): ...
def move_to_device(obj: Union[torch.Tensor, nn.Module], device: torch.device): ...
def find_layers(module, layers: Incomplete | None = ..., name: str = ...): ...
def get_module_by_name_prefix(model, module_name: str): ...
def get_module_by_name_suffix(model, module_name: str): ...
def make_quant(module, names, bits, group_size, name: str = ..., use_triton: bool = ..., use_cuda_fp16: bool = ..., desc_act: bool = ..., trainable: bool = ...) -> None: ...
def pack_model(model, quantizers, bits, group_size, use_triton: bool = ..., use_cuda_fp16: bool = ..., desc_act: bool = ..., warmup_triton: bool = ..., force_layer_back_to_cpu: bool = ...): ...
def check_and_get_model_type(model_dir, trust_remote_code: bool = ...): ...
def simple_dispatch_model(model, device_map): ...
def make_sure_no_tensor_in_meta_device(model, use_triton, desc_act, group_size) -> None: ...
