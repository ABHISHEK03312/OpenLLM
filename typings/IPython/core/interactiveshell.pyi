import abc
from ast import stmt
from pathlib import Path
from typing import Any as AnyType
from typing import Callable
from typing import List as ListType
from typing import Optional
from typing import Tuple

from _typeshed import Incomplete
from IPython.core.alias import Alias as Alias
from IPython.core.alias import AliasManager as AliasManager
from IPython.core.autocall import ExitAutocall as ExitAutocall
from IPython.core.builtin_trap import BuiltinTrap as BuiltinTrap
from IPython.core.compilerop import CachingCompiler as CachingCompiler
from IPython.core.debugger import InterruptiblePdb as InterruptiblePdb
from IPython.core.display_trap import DisplayTrap as DisplayTrap
from IPython.core.displayhook import DisplayHook as DisplayHook
from IPython.core.displaypub import DisplayPublisher as DisplayPublisher
from IPython.core.error import InputRejected as InputRejected
from IPython.core.error import UsageError as UsageError
from IPython.core.events import EventManager as EventManager
from IPython.core.events import available_events as available_events
from IPython.core.extensions import ExtensionManager as ExtensionManager
from IPython.core.formatters import DisplayFormatter as DisplayFormatter
from IPython.core.history import HistoryManager as HistoryManager
from IPython.core.inputtransformer2 import ESC_MAGIC as ESC_MAGIC
from IPython.core.inputtransformer2 import ESC_MAGIC2 as ESC_MAGIC2
from IPython.core.logger import Logger as Logger
from IPython.core.macro import Macro as Macro
from IPython.core.oinspect import OInfo as OInfo
from IPython.core.payload import PayloadManager as PayloadManager
from IPython.core.prefilter import PrefilterManager as PrefilterManager
from IPython.core.profiledir import ProfileDir as ProfileDir
from IPython.core.usage import default_banner as default_banner
from IPython.display import display as display
from IPython.paths import get_ipython_dir as get_ipython_dir
from IPython.testing.skipdoctest import skip_doctest as skip_doctest
from traitlets.config.configurable import SingletonConfigurable

sphinxify: Optional[Callable[..., AnyType]]

class ProvisionalWarning(DeprecationWarning): ...

dedent_re: Incomplete

class ExecutionInfo:
    raw_cell: Incomplete
    store_history: bool
    silent: bool
    shell_futures: bool
    cell_id: Incomplete
    def __init__(self, raw_cell, store_history, silent, shell_futures, cell_id) -> None: ...

class ExecutionResult:
    execution_count: Incomplete
    error_before_exec: Incomplete
    error_in_exec: Optional[BaseException]
    info: Incomplete
    result: Incomplete
    def __init__(self, info) -> None: ...
    @property
    def success(self): ...
    def raise_error(self) -> None: ...

class InteractiveShell(SingletonConfigurable):
    ast_transformers: Incomplete
    autocall: Incomplete
    autoindent: Incomplete
    autoawait: Incomplete
    loop_runner_map: Incomplete
    loop_runner: Incomplete
    automagic: Incomplete
    banner1: Incomplete
    banner2: Incomplete
    cache_size: Incomplete
    color_info: Incomplete
    colors: Incomplete
    debug: Incomplete
    disable_failing_post_execute: Incomplete
    display_formatter: Incomplete
    displayhook_class: Incomplete
    display_pub_class: Incomplete
    compiler_class: Incomplete
    inspector_class: Incomplete
    sphinxify_docstring: Incomplete
    enable_html_pager: Incomplete
    data_pub_class: Incomplete
    exit_now: Incomplete
    exiter: Incomplete
    execution_count: Incomplete
    filename: Incomplete
    ipython_dir: Incomplete
    input_transformer_manager: Incomplete
    @property
    def input_transformers_cleanup(self): ...
    input_transformers_post: Incomplete
    @property
    def input_splitter(self): ...
    logstart: Incomplete
    logfile: Incomplete
    logappend: Incomplete
    object_info_string_level: Incomplete
    pdb: Incomplete
    display_page: Incomplete
    show_rewritten_input: Incomplete
    quiet: Incomplete
    history_length: Incomplete
    history_load_length: Incomplete
    ast_node_interactivity: Incomplete
    warn_venv: Incomplete
    separate_in: Incomplete
    separate_out: Incomplete
    separate_out2: Incomplete
    wildcards_case_sensitive: Incomplete
    xmode: Incomplete
    alias_manager: Incomplete
    prefilter_manager: Incomplete
    builtin_trap: Incomplete
    display_trap: Incomplete
    extension_manager: Incomplete
    payload_manager: Incomplete
    history_manager: Incomplete
    magics_manager: Incomplete
    profile_dir: Incomplete
    @property
    def profile(self): ...
    pylab_gui_select: Incomplete
    last_execution_succeeded: Incomplete
    last_execution_result: Incomplete
    configurables: Incomplete
    db: Incomplete
    raw_input_original: Incomplete
    trio_runner: Incomplete
    def __init__(
        self,
        ipython_dir: Incomplete | None = ...,
        profile_dir: Incomplete | None = ...,
        user_module: Incomplete | None = ...,
        user_ns: Incomplete | None = ...,
        custom_exceptions=...,
        **kwargs,
    ) -> None: ...
    def get_ipython(self): ...
    def set_autoindent(self, value: Incomplete | None = ...) -> None: ...
    def set_trio_runner(self, tr) -> None: ...
    def init_ipython_dir(self, ipython_dir) -> None: ...
    def init_profile_dir(self, profile_dir) -> None: ...
    more: bool
    compile: Incomplete
    meta: Incomplete
    tempfiles: Incomplete
    tempdirs: Incomplete
    starting_dir: Incomplete
    indent_current_nsp: int
    def init_instance_attrs(self) -> None: ...
    def init_environment(self) -> None: ...
    stdin_encoding: Incomplete
    def init_encoding(self) -> None: ...
    pycolorize: Incomplete
    def init_syntax_highlighting(self, changes: Incomplete | None = ...): ...
    def refresh_style(self) -> None: ...
    home_dir: Incomplete
    dir_stack: Incomplete
    def init_pushd_popd_magic(self) -> None: ...
    logger: Incomplete
    def init_logger(self) -> None: ...
    def init_logstart(self) -> None: ...
    def init_builtins(self) -> None: ...
    inspector: Incomplete
    def init_inspector(self, changes: Incomplete | None = ...) -> None: ...
    def init_io(self) -> None: ...
    def init_prompts(self) -> None: ...
    def init_display_formatter(self) -> None: ...
    display_pub: Incomplete
    def init_display_pub(self) -> None: ...
    data_pub: Incomplete
    def init_data_pub(self) -> None: ...
    displayhook: Incomplete
    def init_displayhook(self) -> None: ...
    @staticmethod
    def get_path_links(p: Path): ...
    def init_virtualenv(self) -> None: ...
    def save_sys_module_state(self) -> None: ...
    def restore_sys_module_state(self) -> None: ...
    @property
    def banner(self): ...
    def show_banner(self, banner: Incomplete | None = ...) -> None: ...
    hooks: Incomplete
    strdispatchers: Incomplete
    def init_hooks(self) -> None: ...
    def set_hook(
        self, name, hook, priority: int = ..., str_key: Incomplete | None = ..., re_key: Incomplete | None = ...
    ) -> None: ...
    events: Incomplete
    def init_events(self) -> None: ...
    def register_post_execute(self, func) -> None: ...
    def new_main_mod(self, filename, modname): ...
    def clear_main_mod_cache(self) -> None: ...
    call_pdb: Incomplete
    def init_pdb(self) -> None: ...
    def debugger(self, force: bool = ...) -> None: ...
    default_user_namespaces: bool
    user_ns_hidden: Incomplete
    ns_table: Incomplete
    def init_create_namespaces(
        self, user_module: Incomplete | None = ..., user_ns: Incomplete | None = ...
    ) -> None: ...
    @property
    def user_global_ns(self): ...
    def prepare_user_module(self, user_module: Incomplete | None = ..., user_ns: Incomplete | None = ...): ...
    def init_sys_modules(self) -> None: ...
    def init_user_ns(self) -> None: ...
    @property
    def all_ns_refs(self): ...
    def reset(self, new_session: bool = ..., aggressive: bool = ...) -> None: ...
    def del_var(self, varname, by_name: bool = ...) -> None: ...
    def reset_selective(self, regex: Incomplete | None = ...) -> None: ...
    def push(self, variables, interactive: bool = ...) -> None: ...
    def drop_by_id(self, variables) -> None: ...
    def object_inspect(self, oname, detail_level: int = ...): ...
    def object_inspect_text(self, oname, detail_level: int = ...): ...
    def object_inspect_mime(self, oname, detail_level: int = ..., omit_sections=...): ...
    def init_history(self) -> None: ...
    debugger_cls = InterruptiblePdb
    SyntaxTB: Incomplete
    InteractiveTB: Incomplete
    sys_excepthook: Incomplete
    def init_traceback_handlers(self, custom_exceptions) -> None: ...
    CustomTB: Incomplete
    custom_exceptions: Incomplete
    def set_custom_exc(self, exc_tuple, handler): ...
    def excepthook(self, etype, value, tb) -> None: ...
    def show_usage_error(self, exc) -> None: ...
    def get_exception_only(self, exc_tuple: Incomplete | None = ...): ...
    def showtraceback(
        self,
        exc_tuple: Incomplete | None = ...,
        filename: Incomplete | None = ...,
        tb_offset: Incomplete | None = ...,
        exception_only: bool = ...,
        running_compiled_code: bool = ...,
    ) -> None: ...
    def showsyntaxerror(self, filename: Incomplete | None = ..., running_compiled_code: bool = ...) -> None: ...
    def showindentationerror(self) -> None: ...
    rl_next_input: Incomplete
    def set_next_input(self, s, replace: bool = ...) -> None: ...
    Completer: Incomplete
    def init_completer(self) -> None: ...
    def complete(self, text, line: Incomplete | None = ..., cursor_pos: Incomplete | None = ...): ...
    def set_custom_completer(self, completer, pos: int = ...) -> None: ...
    def set_completer_frame(self, frame: Incomplete | None = ...) -> None: ...
    register_magics: Incomplete
    def init_magics(self) -> None: ...
    def register_magic_function(self, func, magic_kind: str = ..., magic_name: Incomplete | None = ...) -> None: ...
    def run_line_magic(self, magic_name: str, line, _stack_depth: int = ...): ...
    def get_local_scope(self, stack_depth): ...
    def run_cell_magic(self, magic_name, line, cell): ...
    def find_line_magic(self, magic_name): ...
    def find_cell_magic(self, magic_name): ...
    def find_magic(self, magic_name, magic_kind: str = ...): ...
    def magic(self, arg_s): ...
    def define_macro(self, name, themacro) -> None: ...
    def system_piped(self, cmd) -> None: ...
    def system_raw(self, cmd) -> None: ...
    system = system_piped
    def getoutput(self, cmd, split: bool = ..., depth: int = ...): ...
    def init_alias(self) -> None: ...
    def init_extension_manager(self) -> None: ...
    def init_payload(self) -> None: ...
    prefilter: Incomplete
    def init_prefilter(self) -> None: ...
    def auto_rewrite_input(self, cmd) -> None: ...
    def user_expressions(self, expressions): ...
    def ex(self, cmd) -> None: ...
    def ev(self, expr): ...
    def safe_execfile(
        self, fname, *where, exit_ignore: bool = ..., raise_exceptions: bool = ..., shell_futures: bool = ...
    ) -> None: ...
    def safe_execfile_ipy(self, fname, shell_futures: bool = ..., raise_exceptions: bool = ...) -> None: ...
    def safe_run_module(self, mod_name, where) -> None: ...
    def run_cell(
        self,
        raw_cell,
        store_history: bool = ...,
        silent: bool = ...,
        shell_futures: bool = ...,
        cell_id: Incomplete | None = ...,
    ): ...
    def should_run_async(
        self,
        raw_cell: str,
        *,
        transformed_cell: Incomplete | None = ...,
        preprocessing_exc_tuple: Incomplete | None = ...,
    ) -> bool: ...
    async def run_cell_async(
        self,
        raw_cell: str,
        store_history: bool = ...,
        silent: bool = ...,
        shell_futures: bool = ...,
        *,
        transformed_cell: Optional[str] = ...,
        preprocessing_exc_tuple: Optional[AnyType] = ...,
        cell_id: Incomplete | None = ...,
    ) -> ExecutionResult: ...
    def transform_cell(self, raw_cell): ...
    def transform_ast(self, node): ...
    async def run_ast_nodes(
        self,
        nodelist: ListType[stmt],
        cell_name: str,
        interactivity: str = ...,
        compiler=...,
        result: Incomplete | None = ...,
    ): ...
    async def run_code(self, code_obj, result: Incomplete | None = ..., *, async_: bool = ...): ...
    runcode = run_code
    def check_complete(self, code: str) -> Tuple[str, str]: ...
    active_eventloop: Incomplete
    def enable_gui(self, gui: Incomplete | None = ...) -> None: ...
    def enable_matplotlib(self, gui: Incomplete | None = ...): ...
    def enable_pylab(self, gui: Incomplete | None = ..., import_all: bool = ..., welcome_message: bool = ...): ...
    def var_expand(self, cmd, depth: int = ..., formatter=...): ...
    def mktempfile(self, data: Incomplete | None = ..., prefix: str = ...): ...
    def ask_yes_no(self, prompt, default: Incomplete | None = ..., interrupt: Incomplete | None = ...): ...
    def show_usage(self) -> None: ...
    def extract_input_lines(self, range_str, raw: bool = ...): ...
    def find_user_code(
        self, target, raw: bool = ..., py_only: bool = ..., skip_encoding_cookie: bool = ..., search_ns: bool = ...
    ): ...
    def atexit_operations(self) -> None: ...
    def cleanup(self) -> None: ...
    def switch_doctest_mode(self, mode) -> None: ...

class InteractiveShellABC(metaclass=abc.ABCMeta): ...
