from typing import Optional
from typing import Tuple

from _typeshed import Incomplete
from ray.air.util.torch_dist import TorchDistributedWorker
from ray.util.placement_group import PlacementGroup as PlacementGroup
from vllm.config import ParallelConfig as ParallelConfig

class RayWorker(TorchDistributedWorker):
    worker: Incomplete
    def __init__(self) -> None: ...
    def init_worker(self, worker_init_fn) -> None: ...
    def __getattr__(self, name): ...
    def execute_method(self, method, *args, **kwargs): ...

def get_open_port(): ...
def initialize_cluster(parallel_config: ParallelConfig, engine_use_ray: bool = ..., ray_address: Optional[str] = ...) -> Tuple[str, Optional[PlacementGroup]]: ...
