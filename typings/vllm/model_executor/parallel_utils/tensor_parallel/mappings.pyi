import torch
from vllm.model_executor.parallel_utils.parallel_state import (
    get_tensor_model_parallel_group as get_tensor_model_parallel_group,
)
from vllm.model_executor.parallel_utils.parallel_state import (
    get_tensor_model_parallel_rank as get_tensor_model_parallel_rank,
)
from vllm.model_executor.parallel_utils.parallel_state import (
    get_tensor_model_parallel_world_size as get_tensor_model_parallel_world_size,
)

from .utils import split_tensor_along_last_dim as split_tensor_along_last_dim

class _CopyToModelParallelRegion(torch.autograd.Function):
    @staticmethod
    def symbolic(graph, input_): ...
    @staticmethod
    def forward(ctx, input_): ...
    @staticmethod
    def backward(ctx, grad_output): ...

class _ReduceFromModelParallelRegion(torch.autograd.Function):
    @staticmethod
    def symbolic(graph, input_): ...
    @staticmethod
    def forward(ctx, input_): ...
    @staticmethod
    def backward(ctx, grad_output): ...

class _ScatterToModelParallelRegion(torch.autograd.Function):
    @staticmethod
    def symbolic(graph, input_): ...
    @staticmethod
    def forward(ctx, input_): ...
    @staticmethod
    def backward(ctx, grad_output): ...

class _GatherFromModelParallelRegion(torch.autograd.Function):
    @staticmethod
    def symbolic(graph, input_): ...
    @staticmethod
    def forward(ctx, input_): ...
    @staticmethod
    def backward(ctx, grad_output): ...

class _ScatterToSequenceParallelRegion(torch.autograd.Function):
    @staticmethod
    def symbolic(graph, input_): ...
    @staticmethod
    def forward(ctx, input_): ...
    @staticmethod
    def backward(ctx, grad_output): ...

class _GatherFromSequenceParallelRegion(torch.autograd.Function):
    @staticmethod
    def symbolic(graph, input_, tensor_parallel_output_grad: bool = ...): ...
    @staticmethod
    def forward(ctx, input_, tensor_parallel_output_grad: bool = ...): ...
    @staticmethod
    def backward(ctx, grad_output): ...

class _ReduceScatterToSequenceParallelRegion(torch.autograd.Function):
    @staticmethod
    def symbolic(graph, input_): ...
    @staticmethod
    def forward(ctx, input_): ...
    @staticmethod
    def backward(ctx, grad_output): ...

def copy_to_tensor_model_parallel_region(input_): ...
def reduce_from_tensor_model_parallel_region(input_): ...
def scatter_to_tensor_model_parallel_region(input_): ...
def gather_from_tensor_model_parallel_region(input_): ...
def scatter_to_sequence_parallel_region(input_): ...
def gather_from_sequence_parallel_region(input_, tensor_parallel_output_grad: bool = ...): ...
def reduce_scatter_to_sequence_parallel_region(input_): ...
