from typing import Dict
from typing import List
from typing import Optional
from typing import Tuple
from typing import TypeAlias

from _typeshed import Incomplete
from vllm.block import PhysicalTokenBlock as PhysicalTokenBlock
from vllm.sequence import Sequence as Sequence
from vllm.sequence import SequenceGroup as SequenceGroup
from vllm.sequence import SequenceStatus as SequenceStatus
from vllm.utils import Device as Device

class BlockAllocator:
    device: Incomplete
    block_size: Incomplete
    num_blocks: Incomplete
    free_blocks: Incomplete
    def __init__(self, device: Device, block_size: int, num_blocks: int) -> None: ...
    def allocate(self) -> PhysicalTokenBlock: ...
    def free(self, block: PhysicalTokenBlock) -> None: ...
    def get_num_free_blocks(self) -> int: ...
BlockTable: TypeAlias = List[PhysicalTokenBlock]

class BlockSpaceManager:
    block_size: Incomplete
    num_total_gpu_blocks: Incomplete
    num_total_cpu_blocks: Incomplete
    watermark: Incomplete
    watermark_blocks: Incomplete
    gpu_allocator: Incomplete
    cpu_allocator: Incomplete
    block_tables: Incomplete
    def __init__(self, block_size: int, num_gpu_blocks: int, num_cpu_blocks: int, watermark: float = ...) -> None: ...
    def can_allocate(self, seq_group: SequenceGroup) -> bool: ...
    def allocate(self, seq_group: SequenceGroup) -> None: ...
    def can_append_slot(self, seq_group: SequenceGroup) -> bool: ...
    def append_slot(self, seq: Sequence) -> Optional[Tuple[int, int]]: ...
    def fork(self, parent_seq: Sequence, child_seq: Sequence) -> None: ...
    def can_swap_in(self, seq_group: SequenceGroup) -> bool: ...
    def swap_in(self, seq_group: SequenceGroup) -> Dict[int, int]: ...
    def can_swap_out(self, seq_group: SequenceGroup) -> bool: ...
    def swap_out(self, seq_group: SequenceGroup) -> Dict[int, int]: ...
    def free(self, seq: Sequence) -> None: ...
    def reset(self) -> None: ...
    def get_block_table(self, seq: Sequence) -> List[int]: ...
    def get_num_free_gpu_blocks(self) -> int: ...
    def get_num_free_cpu_blocks(self) -> int: ...
