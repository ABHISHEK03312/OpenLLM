#!/usr/bin/env bash
# Copyright 2023 BentoML Team. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set -ex

# Function to print script usage
print_usage() {
    echo "Usage: $0 [--release <major|minor|patch>]"
}

# Function to validate release argument
validate_release() {
    local release=$1

    if [[ $release == "major" || $release == "minor" || $release == "patch" ]]; then
        return 0
    else
        return 1
    fi
}

if ! [ "$GITHUB_ACTIONS" = true ]; then
    echo "This script should only be run on GitHub Actions. Aborting."
    exit 1
fi

# Check if release flag is provided
if [[ $1 == "--release" ]]; then
    # Check if release argument is provided
    if [[ -z $2 ]]; then
        echo "Error: No release argument provided."
        print_usage
        exit 1
    fi

    release=$2

    if ! validate_release "$release"; then
        echo "Error: Invalid release argument. Only 'major', 'minor', or 'patch' are allowed."
        print_usage
        exit 1
    fi
else
    echo "Error: Unknown option or no option provided."
    print_usage
    exit 1
fi

release_package() {
    local version="$1"
    echo "Releasing version ${version}..."

    jq --arg release_version "${version}" '.version = $release_version' < package.json > package.json.tmp && mv package.json.tmp package.json

    if [[ $release == 'patch' ]]; then
        hatch version "${version}"
    fi

    towncrier build --yes --version "${version}"
    git add CHANGELOG.md changelog.d src/openllm/__about__.py package.json
    git commit -S -sm "infra: prepare for release ${version} [generated]"
    git push origin main

    echo "Releasing tag ${version}..." && git tag -a "v${version}" -sm "Release ${version} [generated by GitHub Actions]"
    git push origin "v${version}"

    echo "Finish releasing version ${version}"
}

echo "Cleaning previously built artifacts..." && hatch clean

if [[ $release == 'major' ]]; then
    hatch version major
    CURRENT_VERSION=$(hatch version)
    release_package "${CURRENT_VERSION}"
elif [[ $release == 'minor' ]]; then
    hatch version minor
    CURRENT_VERSION="$(hatch version)"
    release_package "${CURRENT_VERSION}"
else
    CURRENT_VERSION=$(hatch version)

    if [[ "$CURRENT_VERSION" =~ \.dev ]]; then
        release_package "${CURRENT_VERSION%%.dev*}"
    else
        echo "Current version is not properly setup as dev version. Aborting..."
        exit 1
    fi
fi
